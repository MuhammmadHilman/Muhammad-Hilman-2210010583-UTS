/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Jform;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import koneksi.koneksi;

/**
 *
 * @author Hilman
 */
public class InventarisKeluar extends javax.swing.JFrame {
    // Membuat objek koneksi ke database menggunakan class `koneksi`
    private Connection conn = new koneksi().connect();

    // Deklarasi model tabel untuk mengelola data tabel
    private DefaultTableModel tabmode;
    /**
     * Creates new form InventarisKeluar
     */
    public InventarisKeluar() {
        initComponents(); // Menginisialisasi semua komponen GUI

        datatable(); // Memuat data ke dalam tabel dari database
        loadKategori(); // Memuat kategori yang tersedia (dapat digunakan untuk dropdown atau pilihan lainnya)

        // Menambahkan event listener ke tombol pencarian kode barang
        bcarikodebarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcarikodebarangActionPerformed(evt); // Fungsi yang dipanggil saat tombol diklik
            }
        });

        // Menambahkan event listener ke tombol ubah data
        bubah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bubahActionPerformed(evt); // Fungsi yang dipanggil saat tombol ubah diklik
            }
        });

        // Menambahkan event listener ke tabel untuk mendeteksi klik pada baris
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt); // Fungsi yang dipanggil saat baris pada tabel diklik
            }
        });
    }

        /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        txtkodebarang = new javax.swing.JTextField();
        txtnamabarang = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtjumlahkeluar = new javax.swing.JTextField();
        jDateChooserkeluar = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtketerangan = new javax.swing.JTextArea();
        jCombokategori = new javax.swing.JComboBox<>();
        bsimpan = new javax.swing.JButton();
        bubah = new javax.swing.JButton();
        bhapus = new javax.swing.JButton();
        bbatal = new javax.swing.JButton();
        bkeluar = new javax.swing.JButton();
        bcarikodebarang = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtcari = new javax.swing.JTextField();
        bcari = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Inventaris Keluar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 36))); // NOI18N

        jLabel1.setText("Id Keluar");

        jLabel2.setText("Kode_Barang");

        jLabel3.setText("Nama Barang");

        jLabel4.setText("Kategori");

        jLabel5.setText("Jumlah Keluar");

        jLabel6.setText("Tanggal Keluar");

        jLabel7.setText("Keterangan");

        txtketerangan.setColumns(20);
        txtketerangan.setRows(5);
        jScrollPane1.setViewportView(txtketerangan);

        bsimpan.setText("Simpan");
        bsimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bsimpanActionPerformed(evt);
            }
        });

        bubah.setText("Ubah");
        bubah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bubahActionPerformed(evt);
            }
        });

        bhapus.setText("Hapus");
        bhapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bhapusActionPerformed(evt);
            }
        });

        bbatal.setText("Batal");
        bbatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bbatalActionPerformed(evt);
            }
        });

        bkeluar.setText("Keluar");
        bkeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bkeluarActionPerformed(evt);
            }
        });

        bcarikodebarang.setText("Cari");
        bcarikodebarang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcarikodebarangActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtid)
                            .addComponent(txtkodebarang)
                            .addComponent(txtnamabarang)
                            .addComponent(jCombokategori, 0, 164, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(bcarikodebarang)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bsimpan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bubah, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bhapus, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bbatal, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bkeluar, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtjumlahkeluar)
                        .addComponent(jDateChooserkeluar, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(txtjumlahkeluar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtkodebarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(bcarikodebarang)))
                    .addComponent(jDateChooserkeluar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtnamabarang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7)))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jCombokategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bsimpan)
                            .addComponent(bubah)
                            .addComponent(bhapus)
                            .addComponent(bbatal)
                            .addComponent(bkeluar)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "List Data inventaris", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        jLabel8.setText("Cari Data :");

        bcari.setText("Cari");
        bcari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcariActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtcari, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(bcari)))
                        .addGap(0, 533, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtcari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bcari))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadKategori() {
    try {
        // Query untuk mengambil data kategori_barang dari inventaris_masuk
        String sql = "SELECT DISTINCT kategori_barang FROM inventaris_masuk";
        PreparedStatement stat = conn.prepareStatement(sql);
        ResultSet hasil = stat.executeQuery();

        // Model untuk JComboBox
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Pilih Kategori"); // Item default

        // Tambahkan data kategori ke model JComboBox
        while (hasil.next()) {
            model.addElement(hasil.getString("kategori_barang"));
        }

        // Atur model JComboBox
        jCombokategori.setModel(model);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Gagal memuat kategori: " + e.getMessage());
    }
}
    
    private void bsimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bsimpanActionPerformed
        // Mengambil data dari input form
        String kodeBarang = txtkodebarang.getText(); // Kode barang dari input teks
        int jumlahKeluar = Integer.parseInt(txtjumlahkeluar.getText()); // Jumlah barang keluar (angka)
        String keterangan = txtketerangan.getText(); // Keterangan tambahan
        java.sql.Date tanggalKeluar = new java.sql.Date(jDateChooserkeluar.getDate().getTime()); // Tanggal barang keluar

        // Query SQL untuk berbagai operasi
        String sqlSelect = "SELECT jumlah FROM inventaris_masuk WHERE kode_barang = ?"; // Mengecek stok barang
        String sqlUpdate = "UPDATE inventaris_masuk SET jumlah = jumlah - ? WHERE kode_barang = ?"; // Mengurangi stok barang
        String sqlInsert = "INSERT INTO inventaris_keluar (kode_barang, tanggal_keluar, jumlah_keluar, keterangan) VALUES (?, ?, ?, ?)"; // Mencatat barang keluar

        try {
            // Mengecek stok barang berdasarkan kode barang
            PreparedStatement psSelect = conn.prepareStatement(sqlSelect);
            psSelect.setString(1, kodeBarang); // Mengisi parameter kode barang
            ResultSet rs = psSelect.executeQuery();

            if (rs.next()) { // Jika kode barang ditemukan
                int jumlahMasuk = rs.getInt("jumlah"); // Mendapatkan stok barang

                // Validasi apakah stok cukup untuk barang keluar
                if (jumlahMasuk >= jumlahKeluar) {
                    // Mengurangi jumlah stok di tabel `inventaris_masuk`
                    PreparedStatement psUpdate = conn.prepareStatement(sqlUpdate);
                    psUpdate.setInt(1, jumlahKeluar); // Mengisi parameter jumlah keluar
                    psUpdate.setString(2, kodeBarang); // Mengisi parameter kode barang
                    psUpdate.executeUpdate();

                    // Menambahkan catatan barang keluar ke tabel `inventaris_keluar`
                    PreparedStatement psInsert = conn.prepareStatement(sqlInsert);
                    psInsert.setString(1, kodeBarang); // Mengisi parameter kode barang
                    psInsert.setDate(2, tanggalKeluar); // Mengisi parameter tanggal keluar
                    psInsert.setInt(3, jumlahKeluar); // Mengisi parameter jumlah keluar
                    psInsert.setString(4, keterangan); // Mengisi parameter keterangan
                    psInsert.executeUpdate();

                    // Menampilkan pesan sukses
                    JOptionPane.showMessageDialog(null, "Data berhasil disimpan!");
                    kosong(); // Mengosongkan input form
                    datatable(); // Menyegarkan tabel data
                } else {
                    // Jika stok tidak cukup
                    JOptionPane.showMessageDialog(null, "Jumlah barang keluar melebihi stok.");
                }
            } else {
                // Jika kode barang tidak ditemukan
                JOptionPane.showMessageDialog(null, "Kode barang tidak ditemukan.");
            }
        } catch (SQLException e) {
            // Menangani kesalahan SQL
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_bsimpanActionPerformed

    private void bkeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bkeluarActionPerformed
        int confirmed = JOptionPane.showConfirmDialog(null, 
         "Apakah Anda yakin ingin keluar?", "Konfirmasi Keluar", 
         JOptionPane.YES_NO_OPTION);

     // Jika pengguna memilih YES, maka tutup form saat ini
     if (confirmed == JOptionPane.YES_OPTION) {
         this.dispose(); // Menutup form saat ini
     }
    }//GEN-LAST:event_bkeluarActionPerformed

    private void bcarikodebarangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcarikodebarangActionPerformed
        String kodeBarang = txtkodebarang.getText();
        if (kodeBarang.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Kode barang tidak boleh kosong");
        } else {
            // Mencari nama barang berdasarkan kode barang
            String sql = "SELECT nama_barang FROM inventaris_masuk WHERE kode_barang=?";
            try {
                PreparedStatement stat = conn.prepareStatement(sql);
                stat.setString(1, kodeBarang);
                ResultSet hasil = stat.executeQuery();

                if (hasil.next()) {
                    // Menampilkan nama barang yang ditemukan
                    txtnamabarang.setText(hasil.getString("nama_barang"));
                } else {
                    JOptionPane.showMessageDialog(null, "Barang dengan kode tersebut tidak ditemukan");
                    txtnamabarang.setText("");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Gagal mencari barang: " + e);
            }
        }
    }//GEN-LAST:event_bcarikodebarangActionPerformed

    private void bhapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bhapusActionPerformed
        // Konfirmasi dari pengguna sebelum menghapus data
        int confirm = JOptionPane.showConfirmDialog(null, "Apakah Anda yakin ingin menghapus data ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) { // Jika pengguna memilih 'YES'
            String sql = "DELETE FROM inventaris_keluar WHERE id_keluar=?"; // Query SQL untuk menghapus data berdasarkan id_keluar
            try {
                // Menyiapkan pernyataan SQL dengan parameter
                PreparedStatement stat = conn.prepareStatement(sql);
                stat.setInt(1, Integer.parseInt(txtid.getText())); // Mengisi parameter id_keluar dari input teks

                // Menjalankan query dan mendapatkan jumlah baris yang terpengaruh
                int rowsAffected = stat.executeUpdate();
                if (rowsAffected > 0) { // Jika ada baris yang terhapus
                    JOptionPane.showMessageDialog(null, "Data berhasil dihapus!"); // Pesan sukses
                    kosong(); // Mengosongkan input form
                    datatable(); // Menyegarkan tabel data
                } else {
                    JOptionPane.showMessageDialog(null, "Data gagal dihapus."); // Pesan jika tidak ada baris yang terhapus
                }
            } catch (SQLException e) { // Menangani kesalahan SQL
                JOptionPane.showMessageDialog(null, "Error saat menghapus data: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_bhapusActionPerformed

    private void bbatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bbatalActionPerformed
        kosong();
    }//GEN-LAST:event_bbatalActionPerformed

    private void bubahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bubahActionPerformed
        // Cek apakah input kode barang tidak kosong
        if (txtkodebarang.getText().isEmpty()) {
            // Menampilkan pesan peringatan jika kode barang kosong
            JOptionPane.showMessageDialog(null, "Kode barang harus diisi!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return; // Menghentikan eksekusi jika input tidak valid
        }

        String sql = "UPDATE inventaris_keluar SET kode_barang=?, tanggal_keluar=?, jumlah_keluar=?, keterangan=? WHERE id_keluar=?";
        try {
            // Membuat PreparedStatement untuk menghindari SQL injection dan mempermudah pengisian parameter
            PreparedStatement stat = conn.prepareStatement(sql);

            // Mengisi parameter SQL dengan nilai dari input pengguna
            stat.setString(1, txtkodebarang.getText()); // Kode barang
            stat.setDate(2, new java.sql.Date(jDateChooserkeluar.getDate().getTime())); // Tanggal keluar
            stat.setInt(3, Integer.parseInt(txtjumlahkeluar.getText())); // Jumlah keluar (integer)
            stat.setString(4, txtketerangan.getText()); // Keterangan
            stat.setInt(5, Integer.parseInt(txtid.getText())); // ID keluar (integer)

            // Menjalankan query update dan mendapatkan jumlah baris yang diperbarui
            int rowsAffected = stat.executeUpdate();

            if (rowsAffected > 0) { // Jika ada baris yang diperbarui
                // Menampilkan pesan sukses
                JOptionPane.showMessageDialog(null, "Data berhasil diubah!");
                kosong(); // Membersihkan form input
                datatable(); // Menyegarkan tabel data
            } else {
                // Menampilkan pesan gagal jika tidak ada baris yang diperbarui
                JOptionPane.showMessageDialog(null, "Data gagal diubah.");
            }
        } catch (SQLException e) { // Menangani kesalahan terkait SQL
            // Menampilkan pesan error saat query gagal dijalankan
            JOptionPane.showMessageDialog(null, "Error saat mengubah data: " + e.getMessage());
        } catch (NumberFormatException e) { // Menangani kesalahan parsing angka
            // Menampilkan pesan kesalahan jika input jumlah keluar bukan angka
            JOptionPane.showMessageDialog(null, "Input jumlah keluar harus berupa angka!", "Kesalahan Input", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bubahActionPerformed

    private void bcariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcariActionPerformed
       // SQL query untuk mencari data berdasarkan kode barang atau keterangan
        String sql = "SELECT * FROM inventaris_keluar WHERE kode_barang LIKE ? OR keterangan LIKE ?";
        try {
            // Menyiapkan PreparedStatement dengan SQL query
            PreparedStatement stat = conn.prepareStatement(sql);

            // Mengambil teks dari txtcari dan menambah wildcard (%) untuk pencarian di database
            stat.setString(1, "%" + txtcari.getText() + "%");  // Pencarian berdasarkan kode barang
            stat.setString(2, "%" + txtcari.getText() + "%");  // Pencarian berdasarkan keterangan

            // Menjalankan query dan mengambil hasilnya
            ResultSet hasil = stat.executeQuery();

            // Menghapus data lama dari tabel sebelum menambahkan data baru
            tabmode.setRowCount(0);

            // Proses untuk mengambil dan menampilkan data dari ResultSet
            while (hasil.next()) {
                // Mengambil data dari setiap kolom
                String id = hasil.getString("id_keluar");
                String kode = hasil.getString("kode_barang");
                String nama = getNamaBarang(kode);  // Mendapatkan nama barang berdasarkan kode_barang
                String tanggal = hasil.getString("tanggal_keluar");
                String jumlah = hasil.getString("jumlah_keluar");
                String keterangan = hasil.getString("keterangan");

                // Menyusun data dalam bentuk array untuk ditambahkan ke tabel
                String[] data = {id, kode, nama, tanggal, jumlah, keterangan};

                // Menambahkan data yang ditemukan ke dalam tabel
                tabmode.addRow(data);
            }
        } catch (SQLException e) {
            // Menampilkan pesan error jika terjadi kesalahan saat eksekusi query
            JOptionPane.showMessageDialog(null, "Data gagal dicari: " + e);
        }
    }//GEN-LAST:event_bcariActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // Ambil baris yang dipilih
        int row = jTable1.getSelectedRow();

        // Ambil data dari baris yang dipilih berdasarkan kolom
        String id = jTable1.getValueAt(row, 0).toString();
        String kodeBarang = jTable1.getValueAt(row, 1).toString();
        String namaBarang = jTable1.getValueAt(row, 2).toString();
        String tanggalKeluar = jTable1.getValueAt(row, 3).toString();
        String jumlahKeluar = jTable1.getValueAt(row, 4).toString();
        String keterangan = jTable1.getValueAt(row, 5).toString();

        // Isi data ke JTextField
        txtid.setText(id);
        txtkodebarang.setText(kodeBarang);
        txtnamabarang.setText(namaBarang);
        try {
            java.util.Date date = new java.text.SimpleDateFormat("yyyy-MM-dd").parse(tanggalKeluar);
            jDateChooserkeluar.setDate(date);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Gagal memparsing tanggal: " + e.getMessage());
        }
        txtjumlahkeluar.setText(jumlahKeluar);
        txtketerangan.setText(keterangan);
    }//GEN-LAST:event_jTable1MouseClicked

    
     protected void datatable() {
        // Definisikan nama kolom untuk tabel
        Object[] Baris = {"ID Keluar", "Kode Barang", "Nama Barang", "Tanggal Keluar", "Jumlah Keluar", "Keterangan"};
        // Membuat model tabel dengan data awal kosong
        tabmode = new DefaultTableModel(null, Baris);
        // Menetapkan model tabel ke jTable1
        jTable1.setModel(tabmode);

        // Query SQL untuk mengambil semua data dari inventaris_keluar
        String sql = "SELECT * FROM inventaris_keluar";
        try {
            // Membuat statement untuk menjalankan query
            Statement stat = conn.createStatement();
            // Menjalankan query dan mengambil hasilnya
            ResultSet hasil = stat.executeQuery(sql);

            // Menambahkan data ke tabel
            while (hasil.next()) {
                // Mengambil data dari setiap kolom hasil query
                String id = hasil.getString("id_keluar");
                String kode = hasil.getString("kode_barang");
                // Memanggil fungsi getNamaBarang untuk mendapatkan nama barang berdasarkan kode barang
                String nama = getNamaBarang(kode);
                String tanggal = hasil.getString("tanggal_keluar");
                String jumlah = hasil.getString("jumlah_keluar");
                String keterangan = hasil.getString("keterangan");

                // Menyusun data dalam array
                String[] data = {id, kode, nama, tanggal, jumlah, keterangan};

                // Menambahkan baris ke tabel
                tabmode.addRow(data);
            }
        } catch (SQLException e) {
            // Menangani error jika query gagal
            JOptionPane.showMessageDialog(null, "Data gagal ditampilkan: " + e);
        }
    }
     
     private String getNamaBarang(String kodeBarang) {
        String namaBarang = ""; // Default value if no result is found
        String sql = "SELECT nama_barang FROM inventaris_masuk WHERE kode_barang = ?"; // SQL query to fetch the nama_barang

        // Using try-with-resources to automatically close resources
        try (PreparedStatement stat = conn.prepareStatement(sql)) {
            // Set the parameter for the SQL query
            stat.setString(1, kodeBarang);

            // Execute the query and get the result set
            try (ResultSet hasil = stat.executeQuery()) {
                if (hasil.next()) {
                    namaBarang = hasil.getString("nama_barang"); // Extract the nama_barang from the result set
                }
            }
        } catch (SQLException e) {
            // Show an error message if an exception occurs
            JOptionPane.showMessageDialog(null, "Gagal mengambil nama barang: " + e.getMessage());
        }

        return namaBarang; // Return the retrieved nama_barang or empty string if not found
    }
     
     
     private void kosong() {
        txtid.setText("");
        txtkodebarang.setText("");
        txtnamabarang.setText("");
        txtjumlahkeluar.setText("");
        jCombokategori.setSelectedIndex(0);
        jDateChooserkeluar.setDate(null);
        txtketerangan.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InventarisKeluar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InventarisKeluar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InventarisKeluar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InventarisKeluar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventarisKeluar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bbatal;
    private javax.swing.JButton bcari;
    private javax.swing.JButton bcarikodebarang;
    private javax.swing.JButton bhapus;
    private javax.swing.JButton bkeluar;
    private javax.swing.JButton bsimpan;
    private javax.swing.JButton bubah;
    private javax.swing.JComboBox<String> jCombokategori;
    private com.toedter.calendar.JDateChooser jDateChooserkeluar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtcari;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextField txtjumlahkeluar;
    private javax.swing.JTextArea txtketerangan;
    private javax.swing.JTextField txtkodebarang;
    private javax.swing.JTextField txtnamabarang;
    // End of variables declaration//GEN-END:variables
}
